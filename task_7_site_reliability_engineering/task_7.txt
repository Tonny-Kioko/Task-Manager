Objective: Implement basic SRE principles by monitoring and ensuring the reliability of the deployed
web application. Include:
○ Setup monitoring tools (e.g., Prometheus, Grafana)
○ Configure alerts for critical metrics
○ Implement basic incident response procedures


- Monitoring allows DevOps teams get a better understanding on their resources utilization. 
  Prometheus allows setting up monitoring while Grafana allows for visualizations. This prevents various challenges;
    1. Disk Full errors where no more data can be stored
    2. Request errors from a software bug
    3. Hardware failure from high temperatures
    4. Network Outages that prevent service communication
    5. A low memory utilization that results in resource wastage and over payments.


OBJECTIVE 1: SETTING UP PROMETHEUS

1. Creating a user for Prometheus and Node Exporter. I will be prepping the env within which our setup will run
    'useradd --no-create-home --shell /usr/sbin/nologin prometheus'
    'useradd --no-create-home --shell /bin/false node_exporter'

2. Creating the folders required to store the binaries of Prometheus and its configuration file
    'mkdir /etc/prometheus'
    'mkdir /var/lib/prometheus'

3. Set the ownership of these directories to our prometheus user, to make sure that Prometheus can access to these folders.
    'chown prometheus:prometheus /etc/prometheus'
    'chown prometheus:prometheus /var/lib/prometheus'

4. Downloading and installing Node Exporter
    'wget https://github.com/prometheus/node_exporter/releases/download/v1.5.0/node_exporter-1.5.0.linux-amd64.tar.gz'
    'tar xvf node_exporter-1.5.0.linux-amd64.tar.gz'
    'cp node_exporter-1.5.0.linux-amd64/node_exporter /usr/local/bin'
    'chown node_exporter:node_exporter /usr/local/bin/node_exporter'
    'rm -rf node_exporter-1.5.0.linux-amd64.tar.gz node_exporter-1.5.0.linux-amd64'
    'nano /etc/systemd/system/node_exporter.service'
            [Unit]
            Description=Node Exporter
            Wants=network-online.target
            After=network-online.target

            [Service]
            User=node_exporter
            Group=node_exporter
            Type=simple
            ExecStart=/usr/local/bin/node_exporter

            [Install]
            WantedBy=multi-user.target

    'systemctl daemon-reload'
    'systemctl start node_exporter.service'
    'systemctl status node_exporter.service'

5. Setting up Prometheus
    'apt-get update && apt-get upgrade
        wget https://github.com/prometheus/prometheus/releases/download/v2.42.0/prometheus-2.42.0.linux-amd64.tar.gz
    tar xfz prometheus-*.tar.gz
    cd prometheus-2.42.0.linux-amd64/'
    'cp ./prometheus /usr/local/bin/'
    'cp ./promtool /usr/local/bin/'
    'chown prometheus:prometheus /usr/local/bin/prometheus'
    'chown prometheus:prometheus /usr/local/bin/promtool'
    'cp -r ./consoles /etc/prometheus'
    'cp -r ./console_libraries /etc/prometheus'
    'chown -R prometheus:prometheus /etc/prometheus/consoles'
    'chown -R prometheus:prometheus /etc/prometheus/console_libraries'
    'cd .. && rm -rf prometheus-\*'

6. Configuring Prometheus
    'nano /etc/prometheus/prometheus.yml'
        global:
            scrape_interval:     15s
            evaluation_interval: 15s

        rule_files:
        # - "first.rules"
        # - "second.rules"

        scrape_configs:
        - job_name: 'prometheus'
            scrape_interval: 5s
            static_configs:
            - targets: ['localhost:9090']  

    'chown prometheus:prometheus /etc/prometheus/prometheus.yml'

7. Running Prometheus
    'sudo -u prometheus /usr/local/bin/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries'
    'Open your browser and type http://IP.OF.YOUR.SERVER:9090 to access the Prometheus interface'
    'nano /etc/systemd/system/prometheus.service'
        [Unit]
        Description=Prometheus Monitoring
        Wants=network-online.target
        After=network-online.target

        [Service]
        User=prometheus
        Group=prometheus
        Type=simple
        ExecStart=/usr/local/bin/prometheus \
        --config.file /etc/prometheus/prometheus.yml \
        --storage.tsdb.path /var/lib/prometheus/ \
        --web.console.templates=/etc/prometheus/consoles \
        --web.console.libraries=/etc/prometheus/console_libraries
        ExecReload=/bin/kill -HUP $MAINPID

        [Install]
        WantedBy=multi-user.target

    'systemctl daemon-reload'
    'systemctl enable prometheus.service'
    'systemctl start prometheus.service'


OBJECTIVE 2: SETTING UP GRAFANA

1. Install Grafana on our Instance which queries our Prometheus Instance'
    'apt-get install -y adduser libfontconfig1'
    'wget https://dl.grafana.com/oss/release/grafana_9.3.6_amd64.deb'
    'dpkg -i grafana_9.3.6_amd64.deb'

2. Enable the automatic start of Grafana
    'systemctl daemon-reload && systemctl enable grafana-Instance.service && systemctl start grafana-Instance.service'
        - Grafana is running now, and we can connect to it at http://your.Instance.ip:3000


OBJECTIVE 3: CONFIGURING A DATA SOURCE FOR  GRAFANA

1. On the Grafana UI, click on the settings icon
2. Click on the Data Sources option and select Add data Source
3. Select Prometheus as my data source. 
4. Set the Prometheus Instance URL (http://localhost:9090/)
5. Click Save and Test


OBJECTIVE 4: CONFIGURING ALERTS FOR CRITICAL METRICS

1. Create an alertmanager.yml file and configure the desired notification, in my case I will be using email
2. Create a prometheus.yml file for monitoring configuration


OBJECTIVE 5: BASIC INCIDENT REPORT PROCEDURES

1. First, I will define the severity levels based on their impact on the performance of the web app. These will range between minor, major and critical. 
2. Critical incidences will be addressed immediately, Major incidences will be addressed within the hour while minor incidences will be added to a queue and assigned to a team member as soon as possible. 
3. Establish an Incident Reporting Channel to ensure they are communicated immediately. 
4. Initiate an investigation to determine the root cause of the incident, get relevant data, logs, and metrics to analyze the incident's impact and identify contributing factors
5. Mitigate the incident and monitor affected systems to ensure they are fixed. 
6. Conduct a post-incident review (PIR) to analyze the incident response process and identify areas for improvement.


CHALLENGES ENCOUNTERED:
1. Setting up Prometheus
2. Configuring an alert manager for critical metrics
